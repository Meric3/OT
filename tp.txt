이것도 파이썬 코드로 바꿔줘
% Section_3_Module_3_Example_1_N_Variations.m - This script runs the same
% engagement as Section_3_Module_3_Example_1.m but is set up to iteratively
% run through various values of N. Data is stored in a structure so that
% trends with respect to the navigation gain, N, can be plotted.
%
% State is y = [beta, RTx, RTz, RMx, RMz, VTx, VTz, VMx, VMz]
%
% beta - target flight path angle
% RTx  - horizontal position of target wrt inertial cs
% RTz  - vertical position of target wrt inertial cs
% RMx  - horizontal position of missile wrt inertial cs
% RTz  - horizontal position of missile wrt inertial cs
% VTx  - horizontal velocity of target wrt inertial cs
% VTz  - vertical velocity of target wrt inertial cs
% VMx  - horizontal velocity of missile wrt inertial cs
% VMz  - vertical velocity of missile wrt inertial cs
%
% DEPENDENCIES:
% nlinpronav_sim.m
%
% History: Written by B. Dickinson, 2020.
%
% References: ProNav theory implemented from P. Zarchan, "Tactical and
% Strategic Missile Guidance", 5th Ed.
%
% DISCLAIMER: This script is purely for academic purposes and no warranty
% of accuracy is expressed or implied. Although reasonable effort has been
% made to ensure accuracy, scripts have not undergone rigorous verification
% and bugs should be assumed to exist. Any action you take upon using these
% scripts is strictly at your own risk. We assume no liability for any losses
% and/or damages in connection with the use of this code.
%
% CONSENT: By using this code you hereby consent to the above disclaimer and
% its terms.
%-------------------------------------------------------------------------------
clear all
close all

% Settings
%-------------------------------------------------------------------------------
PN_type = 'Pure';
% PN_type = 'True';

% Pointers to states
sel_beta = 1;
sel_RTx  = 2;
sel_RTz  = 3;
sel_RMx  = 4;
sel_RMz  = 5;
sel_VTx  = 6;
sel_VTz  = 7;
sel_VMx  = 8;
sel_VMz  = 9;

% Simulation parameters
%-------------------------------------------------------------------------------
aT = 0;
HE_rad = -20*pi/180;
Np = 3:5;
tf = 11;
h = 1e-2;

% Initial Conditions
%-------------------------------------------------------------------------------
beta_rad = 0;
RTx      = 40000;
RTz      = 10000;
RMx      = 0;
RMz      = 10000;
VM       = 3000;
VT       = 1000;
VTx      = -VT*cos(beta_rad);
VTz      =  VT*sin(beta_rad);

% relative positions and velocities
RTMx = RTx - RMx;
RTMz = RTz - RMz;

% relative distance
RTM = sqrt(RTMx^2 + RTMz^2);

% line of sight angle and time derivative
lambda = atan2( RTMz, RTMx );

% missile lead angle
L = asin( VT*sin( beta_rad + lambda )/VM );

% missile velocity components
VMx  = VM*cos(lambda + L + HE_rad);
VMz  = VM*sin(lambda + L + HE_rad);

% Initial condition vector
y0 = [beta_rad, RTx, RTz, RMx, RMz, VTx, VTz, VMx, VMz]';

% Simulation - integrate nonlinear 2-D engagement with RK4
%-------------------------------------------------------------------------------

t0 = 0;
for k = 1 : length(Np)

    y = y0;
    yout = y;
    t = t0 : h : tf-h; nt = length(t);
    for j = 1 : nt-1
       s1 = nlinpronav_sim(t(j), y, HE_rad, Np(k), aT, VM, PN_type);
       s2 = nlinpronav_sim(t(j)+h/2, y+h*s1/2, HE_rad, Np(k), aT, VM, PN_type);
       s3 = nlinpronav_sim(t(j)+h/2, y+h*s2/2, HE_rad, Np(k), aT, VM, PN_type);
       s4 = nlinpronav_sim(t(j)+h, y+h*s3, HE_rad, Np(k), aT, VM, PN_type);
       y = y + h*(s1 + 2*s2 + 2*s3 + s4)/6;
       yout = [yout, y];
    end
    y = yout';

    % target and missile velocity magnitudes
    VT = sqrt( y(:,sel_VTx).^2 + y(:,sel_VTz).^2 );

    % relative positions and velocities
    RTMx = y(:,sel_RTx) - y(:,sel_RMx);
    RTMz = y(:,sel_RTz) - y(:,sel_RMz);
    VTM1 = y(:,sel_VTx) - y(:,sel_VMx);
    VTM2 = y(:,sel_VTz) - y(:,sel_VMz);

    % relative distance
    RTM = sqrt(RTMx.^2 + RTMz.^2);

    % line of sight angle and time derivative
    lambda     = atan2( RTMz, RTMx );
    lambda_dot = (RTMx.*VTM2 - RTMz.*VTM1)./RTM.^2;

    % closing velocity
    VC = -(RTMx.*VTM1 + RTMz.*VTM2)./RTM;

    % Compute acc commands
    if strcmp(PN_type,'True')
      aM = Np(k)*VC.*lambda_dot;
    elseif strcmp(PN_type,'Pure')
      aM = Np(k)*VM.*lambda_dot;
    else
      disp('Error: ProNav type not recognized.')
      return
    end

    % Store results
    pn_sim_results(k).y = y;
    pn_sim_results(k).N = Np(k);
    pn_sim_results(k).aM = aM;
    pn_sim_results(k).Vc = VC;
    pn_sim_results(k).lambda = lambda;
    pn_sim_results(k).lambda_dot = lambda_dot;
    pn_sim_results(k).RTM = RTM;
    pn_sim_results(k).RTMx = RTMx;
    pn_sim_results(k).RTMz = RTMz;
    pn_sim_results(k).VTMx = VTM1;
    pn_sim_results(k).VTMz = VTM2;
    pn_sim_results(k).VT = VT;
    pn_sim_results(k).t = t;

end

%% Post-process simulation results
%-------------------------------------------------------------------------------

ls = {'b','r','g','k','m','c','y','b'};

for l = 1 : length(Np)

    % Get indices up to miss distance
    t_miss = find(pn_sim_results(l).RTM==min(pn_sim_results(l).RTM));

    % Trajectory plot
    figure(1)
    plot(pn_sim_results(l).y(1:t_miss,sel_RTx), ...
        pn_sim_results(l).y(1:t_miss,sel_RTz), 'r--', ...
        'linewidth', 2); hold on
    plot(pn_sim_results(l).y(1:t_miss,sel_RMx), ...
        pn_sim_results(l).y(1:t_miss,sel_RMz), ls{l}, 'linewidth', 2)

    % Acceleration plot
    figure(2)
    plot(pn_sim_results(l).t(1:t_miss-1), ...
        pn_sim_results(l).aM(1:t_miss-1)./32.2, ls{l}, ...
        'linewidth', 2); hold on

    % Compute control effort
    ctrl_effort = trapz(pn_sim_results(l).t(1:t_miss-1), ...
        (pn_sim_results(l).aM(1:t_miss-1)).^2);
    fprintf('N = %2.2f, ctrl_effort = %2.2e \n', Np(l), ctrl_effort);

end

figure(1)
axis equal
xlabel('Downrange [ft]', 'fontsize', 16);
ylabel('Altitude [ft]', 'fontsize', 16);
title([PN_type 'ProNav, -20 Deg Heading Error'], 'fontsize', 16);
set(gca, 'fontsize', 16, 'xlim', [0 40000], 'ylim', [6000 10500], ...
    'position',[0.0897    0.1516    0.8833    0.7705]);
set(gcf, 'color', 'w', 'position', [12 454 1260 244]);
grid on

figure(2)
xlabel('Time [s]', 'fontsize', 16);
ylabel('Acceleration [g]', 'fontsize', 16);
title([PN_type 'ProNav, -20 Deg Heading Error'], 'fontsize', 16);
set(gca, 'fontsize', 16, 'ylim', [0 20], 'xlim', [0 t(t_miss-1)]);
set(gcf, 'color', 'w');
grid on
